# N-Queens Problem using Backtracking

def print_board(board):
    """Pretty print the chessboard."""
    for row in board:
        print(" ".join("Q" if c else "." for c in row))
    print("\n")

def is_safe(board, row, col, n):
    """Check if placing a queen at (row, col) is safe."""
    # Check column
    for i in range(row):
        if board[i][col]:
            return False
    
    # Check upper-left diagonal
    i, j = row - 1, col - 1
    while i >= 0 and j >= 0:
        if board[i][j]:
            return False
        i -= 1
        j -= 1

    # Check upper-right diagonal
    i, j = row - 1, col + 1
    while i >= 0 and j < n:
        if board[i][j]:
            return False
        i -= 1
        j += 1

    return True


def solve_nqueens(board, row, n):
    """Recursive backtracking function."""
    if row == n:
        print("✅ Solution Found:")
        print_board(board)
        return True  # To print all solutions, remove this and continue searching
    
    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = True  # Place queen
            res = solve_nqueens(board, row + 1, n) or res
            board[row][col] = False  # Backtrack (remove queen)
    return res


def n_queens(n):
    """Driver function."""
    board = [[False]*n for _ in range(n)]
    if not solve_nqueens(board, 0, n):
        print("❌ No solution exists for", n, "queens.")


# -------------------------
# Run the Program
# -------------------------
n = int(input("Enter number of queens (e.g., 4 or 8): "))
n_queens(n)
